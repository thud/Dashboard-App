@page "/"
@inject IJSRuntime JsRuntime;
@using System;
@using System.Net;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Threading.Tasks;

@using System.Collections.Generic;
@using System.Runtime.Serialization.Json;

<h1>Dashboard</h1>

<p>Current count: Select the <b>Display Graph</b> button.</p>

@* 
<button class="btn btn-primary" @onclick="@FetchData">Fetch Data</button> 
<button class="btn btn-primary" @onclick="@DisplayGraph1">Display Graph 1</button>
<button class="btn btn-primary" @onclick="@DisplayGraph2">Display Graph 2</button>
*@

<div id="graph1" style="width: 1600px; height:400px; margin-top: 50px;"></div>
<div id="graph2" style="width: 1600px; height:400px; margin-top: 50px;"></div>


<p style="color: grey;">NOTE: Due to the structure of the Blazor Framework, to see trade information for trades in this batch, you must: <br/><b>1. TYPE IN THE BATCH-GUID FOR YOUR CHOSEN BATCH<br/>2. PRESS ENTER IN THE INPUT BOX<br/>3. PRESS THE BLUE REFRESH BUTTON</b></p>
<h3>BatchGUID: <input id="batchGUIDinput" type="text" @bind="@Index.selectedBatchGUID" /><button type="submit" class="btn btn-info" onclick="@update">Refresh</button></h3>

<table class="table table-hover" id="trades-table">
  <thead>
    <tr>
      <th scope="col">TradeID</th>
      <th scope="col">SecID</th>
      <th scope="col">Client Account No.</th>
      <th scope="col">Report Name</th>
    </tr>
  </thead>
  @if (!Index.trades.Any()) {
    <tr>
      <th scope="row">N/A</th>
      <td>N/A</td>
      <td>N/A</td>
      <td>N/A</td>
    </tr>
  } else {
  @if (selectedBatchGUID != -1) {
    }
    <tbody>
    @foreach (var trade in Index.trades) {
      <tr>
        <th scope="row">@trade.TradeId</th>
        <td>@trade.SecId</td>
        <td>@trade.ClientAcctNo</td>
        <td>@trade.ReportName</td>
      </tr>
    }
    </tbody>
}
</table>

@functions {
  private static async Task GetBatchDetails(int BatchGUID)
  {
    //Index.selectedBatchGUID = BatchGUID;
    Console.WriteLine("GET http://localhost:3000/api/tradeinformationonbatches/" + BatchGUID);
    var streamTask = client.GetStreamAsync("http://localhost:3000/api/tradeinformationonbatches/" + BatchGUID);

    try {
      Index.trades = tradeSerializer.ReadObject(await streamTask) as List<Trade>;
    } catch {
      Index.trades.Clear(); // create empty list
    }

  }

  private void update() {
    StateHasChanged();
  }

  
  private async Task FetchData()
  {

    var streamTask = client.GetStreamAsync("http://localhost:3000/api/guidelinecheckdurations");
    batches = batchSerializer.ReadObject(await streamTask) as List<Batch>;

    var streamTask2 = client.GetStreamAsync("http://localhost:3000/api/accountscheckedinbatch");
    batchQuantities = batchQuantitySerializer.ReadObject(await streamTask2) as List<BatchQuantity>;
    
  }

  private async Task DisplayGraph1()
  {
      await JsRuntime.InvokeAsync<int>("displayGraph1", batches);
      StateHasChanged();
  }

  private async Task DisplayGraph2()
  {
      await JsRuntime.InvokeAsync<int>("displayGraph2", batchQuantities, batches);
      StateHasChanged();
  }

  protected override async Task OnInitAsync() {
    await FetchData();
    await DisplayGraph1();
    await DisplayGraph2();
  }
}


@code {
    private static readonly HttpClient client = new HttpClient();
    private static DataContractJsonSerializer batchSerializer = new DataContractJsonSerializer(typeof(List<Batch>));
    private static DataContractJsonSerializer batchQuantitySerializer = new DataContractJsonSerializer(typeof(List<BatchQuantity>));
    private static DataContractJsonSerializer tradeSerializer = new DataContractJsonSerializer(typeof(List<Trade>));

    public static List<Batch> batches;
    public static List<BatchQuantity> batchQuantities;
    public static List<Trade> trades = new List<Trade>();
    private static int _selectedBatchGUID;
    public static int selectedBatchGUID { 
      get {
        return _selectedBatchGUID;
        }
      set{
        GetBatchDetails(value);
        _selectedBatchGUID = value;
      }
    }// = -1;


}
